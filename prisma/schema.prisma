generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------- USERS -------------------------

model Admin {
  id       String @id @default(uuid())
  username String @unique
}

model Student {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  rollNo    Int      @default(0)
  bloodType String
  sex       UserSex
  birthday  DateTime
  createdAt DateTime @default(now())
  parentId  String
  classId   Int
  gradeId   Int

  // Relations
  fees        Fee[]        @relation("StudentFees")
  payments    Payment[]    @relation("StudentPayments")
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])
  attendances Attendance[]
  results     Result[]
  incidents   Incident[]
}

model Parent {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())

  // Relations
  students Student[]
}

model Teacher {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  birthday  DateTime
  createdAt DateTime @default(now())

  // Relations
  classes  Class[]
  lessons  Lesson[]
  subjects Subject[] @relation("SubjectToTeacher")
}

model Accountant {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String?
  img       String?
  role      String   @default("accountant")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  fees     Fee[]     @relation("AccountantFees")
  payments Payment[] @relation("AccountantPayments")
}

// ------------------------- ACADEMIC STRUCTURE -------------------------

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  // Relations
  classes  Class[]
  students Student[]
}

model Class {
  id           Int    @id @default(autoincrement())
  name         String @unique
  capacity     Int
  gradeId      Int
  supervisorId String

  // Relations
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher        @relation(fields: [supervisorId], references: [id])
  students      Student[]
  lessons       Lesson[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id        Int    @id @default(autoincrement())
  name      String
  day       Day
  subjectId Int
  classId   Int
  teacherId String

  // Relations
  subject     Subject      @relation(fields: [subjectId], references: [id])
  class       Class        @relation(fields: [classId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  assignments Assignment[]
  exams       Exam[]
}

// ------------------------- FINANCE -------------------------

model FeeType {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?
  defaultAmount Float?   @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  fees Fee[]

  @@map("fee_types")
}

model Fee {
  id            Int       @id @default(autoincrement())
  studentId     String
  accountantId  String?
  feeTypeId     Int
  amount        Float
  paidAmount    Float?    @default(0)
  dueDate       DateTime
  paidDate      DateTime?
  academicYear  String
  semester      String
  status        String    @default("pending")
  description   String?
  paymentMethod String?
  transactionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student    Student     @relation(fields: [studentId], references: [id], name: "StudentFees")
  accountant Accountant? @relation(fields: [accountantId], references: [id], name: "AccountantFees")
  feeType    FeeType     @relation(fields: [feeTypeId], references: [id], onDelete: Cascade)
  payments   Payment[]   @relation("FeePayments")
}

model Payment {
  id            Int      @id @default(autoincrement())
  studentId     String
  feeId         Int
  accountantId  String
  amount        Float
  method        String?
  transactionId String?
  paidAt        DateTime @default(now())

  // Relations
  student    Student    @relation(fields: [studentId], references: [id], name: "StudentPayments")
  fee        Fee        @relation(fields: [feeId], references: [id], name: "FeePayments")
  accountant Accountant @relation(fields: [accountantId], references: [id], name: "AccountantPayments")
}

// ------------------------- ACADEMIC RESULTS -------------------------

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int

  // Relations
  lesson  Lesson   @relation(fields: [lessonId], references: [id])
  results Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int

  // Relations
  lesson  Lesson   @relation(fields: [lessonId], references: [id])
  results Result[]
}

model Result {
  id           Int    @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String

  // Relations
  exam       Exam?       @relation(fields: [examId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  student    Student     @relation(fields: [studentId], references: [id])
}

// ------------------------- ATTENDANCE -------------------------

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String

  // Relations
  student Student @relation(fields: [studentId], references: [id])
}

// ------------------------- EVENTS & ANNOUNCEMENTS -------------------------

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?

  // Relations
  class Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?

  // Relations
  class Class?             @relation(fields: [classId], references: [id])
  views AnnouncementView[]
}

model AnnouncementView {
  id             String   @id @default(cuid())
  userId         String
  announcementId Int
  viewedAt       DateTime @default(now())

  // Relations
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@map("announcement_views")
}

// ------------------------- BEHAVIOR -------------------------

model Behavior {
  id          Int     @id @default(autoincrement())
  title       String
  point       Int
  isNegative  Boolean
  description String

  incidents Incident[]
}

model Incident {
  id         Int      @id @default(autoincrement())
  date       DateTime
  givenById  String
  comment    String
  studentId  String
  behaviorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  student  Student  @relation(fields: [studentId], references: [id])
  behavior Behavior @relation(fields: [behaviorId], references: [id])
}

// ------------------------- ENUMS -------------------------

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
